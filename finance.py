import asyncio
import logging
import aiosqlite
import aiohttp
import json
import random

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# from states import FinancesForm

from config import API_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FinancesForm(StatesGroup):
    category1 = State()
    expenses1 = State()
    category2 = State()
    expenses2 = State()
    category3 = State()
    expenses3 = State()
    category4 = State()
    expenses4 = State()
    category5 = State()
    expenses5 = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ"), KeyboardButton(text="–ö—É—Ä—Å –≤–∞–ª—é—Ç")],
        [KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏"), KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def setup_db():
    db = await aiosqlite.connect('user.db')
    await db.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            name TEXT,
            category1 TEXT,
            category2 TEXT,
            category3 TEXT,
            category4 TEXT,
            category5 TEXT,
            expenses1 REAL,
            expenses2 REAL,
            expenses3 REAL,
            expenses4 REAL,
            expenses5 REAL
        )
    ''')
    await db.commit()
    await db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def get_db():
    return await aiosqlite.connect('user.db')


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìå /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "üìå /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ")
async def registration(message: Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name

    db = await get_db()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î

    async with db.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,)) as cursor:
        user = await cursor.fetchone()

    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await db.execute('INSERT INTO users (telegram_id, name) VALUES (?, ?)', (telegram_id, name))
        await db.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    await db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ aiohttp)
@router.message(lambda message: message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
    url = "https://www.cbr-xml-daily.ru/daily_json.js"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            data = json.loads(data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ JSON

            # data = await response.json()
            usd_to_rub = data["Valute"]["USD"]["Value"]
            eur_to_rub = data["Valute"]["EUR"]["Value"]

            await message.answer(f"üíµ 1 USD = {usd_to_rub:.2f} RUB\nüí∂ 1 EUR = {eur_to_rub:.2f} RUB")

@router.message(F.text == "–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
async def send_tips(message: Message):
   tips = [
       "–°–æ–≤–µ—Ç 1. –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: \n–í–µ–¥–∏—Ç–µ —É—á—ë—Ç —Ç—Ä–∞—Ç —Ç–∞–±–ª–∏—Ü–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—Ç–∫–∏. \n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –Ω–∞ —á—Ç–æ —É—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥, –∏ –≥–¥–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å. \n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç –Ω–∏—Ö –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.",
       "–°–æ–≤–µ—Ç 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: \n–ü–æ–∫—É–ø–∫–∏ –ø–æ –∞–∫—Ü–∏—è–º –∏ —Å–∫–∏–¥–∫–∞–º, –Ω–æ –±–µ–∑ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫ –∏ –±–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. \n–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç. \n–ù–µ –±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥.",
       "–°–æ–≤–µ—Ç 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –ñ–ö–•, —Å–≤—è–∑–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ. \n–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ç—Ä–∏–º–∏–Ω–≥, —Å–æ—Ñ—Ç ‚Äî –Ω—É–∂–Ω—ã –ª–∏ –≤—Å–µ? \n–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏?",
       "–°–æ–≤–µ—Ç 4. –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: \n–ì–æ—Ç–æ–≤—å—Ç–µ –µ–¥—É –¥–æ–º–∞ ‚Äî —ç—Ç–æ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å.\n–ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –æ–ø—Ç–æ–º –∏–ª–∏ –ø–æ —Å–∫–∏–¥–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ.\n–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–µ—â–∏ –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å.",
       "–°–æ–≤–µ—Ç 5. –°–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 10% –¥–æ—Ö–æ–¥–∞ (–∏–ª–∏ –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ).\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É (3‚Äì6 –º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤).\n–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã (–¥–µ–ø–æ–∑–∏—Ç—ã, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –∞–∫—Ü–∏–∏)."
   ]
   tip = random.choice(tips)
   await message.answer(tip)

# –°—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.message(F.text == "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def finances_start(message: Message, state: FSMContext):
    await state.set_state(FinancesForm.category1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1
@router.message(FinancesForm.category1)
async def finances_category1(message: Message, state: FSMContext):
    await state.update_data(category1=message.text)
    await state.set_state(FinancesForm.expenses1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 1:")

# –í–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ 1
@router.message(FinancesForm.expenses1)
async def finances_expenses1(message: Message, state: FSMContext):
    await state.update_data(expenses1=float(message.text))
    await state.set_state(FinancesForm.category2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2
@router.message(FinancesForm.category2)
async def finances_category2(message: Message, state: FSMContext):
    await state.update_data(category2=message.text)
    await state.set_state(FinancesForm.expenses2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 2:")

# –í–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ 2
@router.message(FinancesForm.expenses2)
async def finances_expenses2(message: Message, state: FSMContext):
    await state.update_data(expenses2=float(message.text))
    await state.set_state(FinancesForm.category3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3
@router.message(FinancesForm.category3)
async def finances_category3(message: Message, state: FSMContext):
    await state.update_data(category3=message.text)
    await state.set_state(FinancesForm.expenses3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3:")

# –í–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ 3
@router.message(FinancesForm.expenses3)
async def finances_expenses3(message: Message, state: FSMContext):
    await state.update_data(expenses3=float(message.text))
    await state.set_state(FinancesForm.category4)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 4
@router.message(FinancesForm.category4)
async def finances_category4(message: Message, state: FSMContext):
    await state.update_data(category4=message.text)
    await state.set_state(FinancesForm.expenses4)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 4:")

# –í–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ 4
@router.message(FinancesForm.expenses4)
async def finances_expenses4(message: Message, state: FSMContext):
    await state.update_data(expenses4=float(message.text))
    await state.set_state(FinancesForm.category5)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")

# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 5
@router.message(FinancesForm.category5)
async def finances_category5(message: Message, state: FSMContext):
    await state.update_data(category5=message.text)
    await state.set_state(FinancesForm.expenses5)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 5:")


@router.message(FinancesForm.expenses5)
async def finances(message: Message, state: FSMContext):
   await state.update_data(expenses5=float(message.text))
   data = await state.get_data()
   telegram_id = message.from_user.id

   db = await get_db()
   await db.execute('''UPDATE users SET category1 = ?, expenses1 = ?, category2 = ?, expenses2 = ?, category3 = ?, expenses3 = ?, category4 = ?, expenses4 = ?, category5 = ?, expenses5 = ? WHERE telegram_id = ?''',
                  (data['category1'], data['expenses1'], data['category2'], data['expenses2'], data['category3'], data['expenses3'], data['category4'], data['expenses4'], data['category5'], data["expenses5"], telegram_id))
   await db.commit() 

   await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
   await db.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã
   await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await setup_db()
    dp.include_router(router)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl + C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        dp.shutdown()
        await bot.session.close()
        print("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Ctrl + C.")
