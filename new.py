#new.py
import asyncio

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import API_TOKEN, WEATHER_API_KEY

import aiohttp
import logging
import sqlite3

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

router = Router()

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    name = State()
    age = State()
    city = State()


def init_db():
    conn = sqlite3.connect('user_data.db')
    cur = conn.cursor()

    cur.execute('''
    CREATE TABLE IF NOT EXISTS users  (
	  id INTEGER PRIMARY KEY AUTOINCREMENT,
	  name TEXT NOT NULL,
	  age INTEGER NOT NULL,
	  city TEXT NOT NULL)
    ''')
 
    conn.commit()
    conn.close()

init_db()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await state.set_state(Form.city)

@dp.message(Form.city)
async def city(message: Message, state:FSMContext):
    await state.update_data(city=message.text)
    user_data = await state.get_data()

    conn = sqlite3.connect('user_data.db')
    cur = conn.cursor()
    cur.execute('''
    INSERT INTO users (name, age, city) VALUES (?, ?, ?)''', (user_data['name'], user_data['age'], user_data['city']))
    conn.commit()
    conn.close()

    async with aiohttp.ClientSession() as session:
      async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q={user_data['city']}&appid={WEATHER_API_KEY}&units=metric") as response:
            if response.status == 200:
              weather_data = await response.json()
              main = weather_data['main']
              weather = weather_data['weather'][0]

async def main():
     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    dp.include_router(router)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl + C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        print("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Ctrl + C.")